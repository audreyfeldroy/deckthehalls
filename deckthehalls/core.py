"""A merry FastHTML nbdev project that uses Pygments for Christmas joy"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['pygstyles', 'app', 'rt', 'PythonToPygmentsFT', 'is_code_cell', 'get_code_cells', 'NotebookToPygmentsFT',
           'PythonToRandomPygmentsFT', 'NotebookToRandomPygmentsFT', 'index', 'randstyle']

# %% ../nbs/00_core.ipynb 3
from execnb.nbio import *
from fastcore.all import *
from fasthtml.common import *
from fasthtml.components import show
from fasthtml.jupyter import *
from inspect import getsource
from IPython.display import display, HTML, IFrame
from pathlib import Path
import pygments
from pygments import highlight
from pygments.lexers import PythonLexer
from pygments.formatters import HtmlFormatter
from random import choice

# %% ../nbs/00_core.ipynb 5
pygstyles = L(pygments.styles.get_all_styles())

# %% ../nbs/00_core.ipynb 9
def PythonToPygmentsFT(c, style='rrt'):
    "Turns Python code into a Pygments syntax-highlighted FastTag"
    fm = HtmlFormatter(style=style, cssclass=style)
    h = highlight(c, PythonLexer(), fm)
    sd = fm.get_style_defs(f".{style}")
    return Div(Style(sd), NotStr(h), id=style)

# %% ../nbs/00_core.ipynb 21
def is_code_cell(c): return c.cell_type == 'code'

# %% ../nbs/00_core.ipynb 23
def get_code_cells(nb): return L(nb.cells).filter(is_code_cell).itemgot('source')

# %% ../nbs/00_core.ipynb 27
def NotebookToPygmentsFT(nb, style='rrt'):
    "Warning: This gets only code cells, without their output or any other cells"
    cells = get_code_cells(nb)
    return cells.map(partial(PythonToPygmentsFT, style=style))

# %% ../nbs/00_core.ipynb 31
def PythonToRandomPygmentsFT(c,print_style=True): 
    style = choice(pygstyles)
    result = PythonToPygmentsFT(c, style=style)
    if print_style:
        result = Div(f"Pygments style: {style}", result)
    return result

# %% ../nbs/00_core.ipynb 34
def NotebookToRandomPygmentsFT(nb):
    "Warning: This gets only code cells, without their output or any other cells"
    cells = get_code_cells(nb)
    return cells.map(PythonToRandomPygmentsFT)

# %% ../nbs/00_core.ipynb 36
app,rt = fast_app(pico=False)

# %% ../nbs/00_core.ipynb 39
@rt
def index():
    "Random Pygments style for each cell"
    nb = read_nb(Path("../nbs/deck-the-halls.ipynb"))
    return (
        H1(f"Random Pygments Style For Each Cell"),
        P("This page gets a random ",
            A("Pygments", href="https://pygments.org/"),
            " HtmlFormatter style for each cell of ",
            A("my Deck the Halls Jupyter notebook", href="https://nbsanity.com/static/a426287f3fbfc5a38c99291beadc77d3/2024-12-24-deck-the-halls.html")),
        Div(*NotebookToRandomPygmentsFT(nb))
    )

# %% ../nbs/00_core.ipynb 40
@rt
def randstyle():
    "Random Pygments style upon refresh"
    nb = read_nb(Path("../nbs/deck-the-halls.ipynb"))
    code_cells = get_code_cells(nb)
    style = choice(pygstyles)
    fm = HtmlFormatter(style=style)
    return (
        H1(f"Random style: {style}"),
        P("This page gets a random ",
            A("Pygments", href="https://pygments.org/"),
            " HtmlFormatter style and applies it to ",
            A("my Deck the Halls Jupyter notebook", href="https://nbsanity.com/static/a426287f3fbfc5a38c99291beadc77d3/2024-12-24-deck-the-halls.html")),
        Div(*NotebookToPygmentsFT(nb, style=style))
    )
